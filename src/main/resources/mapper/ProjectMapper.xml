<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.lynu.mapper.ProjectMapper">
  <resultMap id="BaseResultMap" type="cn.lynu.model.Project">
    <id column="project_id" jdbcType="INTEGER" property="projectId" />
    <result column="project_name" jdbcType="VARCHAR" property="projectName" />
    <result column="project_describe" jdbcType="VARCHAR" property="projectDescribe" />
    <result column="project_from_id" jdbcType="INTEGER" property="projectFromId" />
    <result column="teacher_id" jdbcType="CHAR" property="teacherId" />
    <result column="student_id" jdbcType="CHAR" property="studentId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    project_id, project_name, project_describe, project_from_id, teacher_id, student_id
  </sql>
  <select id="selectByExample" parameterType="cn.lynu.model.ProjectExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from project
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from project
    where project_id = #{projectId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from project
    where project_id = #{projectId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.lynu.model.ProjectExample">
    delete from project
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.lynu.model.Project">
    insert into project (project_id, project_name, project_describe, 
      project_from_id, teacher_id, student_id
      )
    values (#{projectId,jdbcType=INTEGER}, #{projectName,jdbcType=VARCHAR}, #{projectDescribe,jdbcType=VARCHAR}, 
      #{projectFromId,jdbcType=INTEGER}, #{teacherId,jdbcType=CHAR}, #{studentId,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="projectId" parameterType="cn.lynu.model.Project">
    insert into project
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="projectId != null">
        project_id,
      </if>
      <if test="projectName != null">
        project_name,
      </if>
      <if test="projectDescribe != null">
        project_describe,
      </if>
      <if test="projectFromId != null">
        project_from_id,
      </if>
      <if test="teacherId != null">
        teacher_id,
      </if>
      <if test="studentId != null">
        student_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="projectId != null">
        #{projectId,jdbcType=INTEGER},
      </if>
      <if test="projectName != null">
        #{projectName,jdbcType=VARCHAR},
      </if>
      <if test="projectDescribe != null">
        #{projectDescribe,jdbcType=VARCHAR},
      </if>
      <if test="projectFromId != null">
        #{projectFromId,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null">
        #{teacherId,jdbcType=CHAR},
      </if>
      <if test="studentId != null">
        #{studentId,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.lynu.model.ProjectExample" resultType="java.lang.Long">
    select count(*) from project
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update project
    <set>
      <if test="record.projectId != null">
        project_id = #{record.projectId,jdbcType=INTEGER},
      </if>
      <if test="record.projectName != null">
        project_name = #{record.projectName,jdbcType=VARCHAR},
      </if>
      <if test="record.projectDescribe != null">
        project_describe = #{record.projectDescribe,jdbcType=VARCHAR},
      </if>
      <if test="record.projectFromId != null">
        project_from_id = #{record.projectFromId,jdbcType=INTEGER},
      </if>
      <if test="record.teacherId != null">
        teacher_id = #{record.teacherId,jdbcType=CHAR},
      </if>
      <if test="record.studentId != null">
        student_id = #{record.studentId,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update project
    set project_id = #{record.projectId,jdbcType=INTEGER},
      project_name = #{record.projectName,jdbcType=VARCHAR},
      project_describe = #{record.projectDescribe,jdbcType=VARCHAR},
      project_from_id = #{record.projectFromId,jdbcType=INTEGER},
      teacher_id = #{record.teacherId,jdbcType=CHAR},
      student_id = #{record.studentId,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.lynu.model.Project">
    update project
    <set>
      <if test="projectName != null">
        project_name = #{projectName,jdbcType=VARCHAR},
      </if>
      <if test="projectDescribe != null">
        project_describe = #{projectDescribe,jdbcType=VARCHAR},
      </if>
      <if test="projectFromId != null">
        project_from_id = #{projectFromId,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null">
        teacher_id = #{teacherId,jdbcType=CHAR},
      </if>
      <if test="studentId != null">
        student_id = #{studentId,jdbcType=CHAR},
      </if>
    </set>
    where project_id = #{projectId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.lynu.model.Project">
    update project
    set project_name = #{projectName,jdbcType=VARCHAR},
      project_describe = #{projectDescribe,jdbcType=VARCHAR},
      project_from_id = #{projectFromId,jdbcType=INTEGER},
      teacher_id = #{teacherId,jdbcType=CHAR},
      student_id = #{studentId,jdbcType=CHAR}
    where project_id = #{projectId,jdbcType=INTEGER}
  </update>
  
  <select id="noChooseProject" resultType="int">
  	select count(*) from project where teacher_id=#{teacherId} and student_id is null
  </select>
  
  <resultMap type="cn.lynu.model.Project" id="projectPlus" extends="BaseResultMap">
  	<association property="teacher" column="teacher_id" select="cn.lynu.mapper.TeacherMapper.findTeacherByTeacherId"></association>
  	<association property="projectFrom" column="project_from_id" select="cn.lynu.mapper.ProjectFromMapper.selectByPrimaryKey"></association>
  </resultMap>
  <select id="getProjectListByTeacherId" resultMap="projectPlus">
  	select 
    <include refid="Base_Column_List" />
    from project
    where teacher_id = #{teacherId}
  </select>
  
  <select id="getProjectByStudentId" resultType="cn.lynu.model.Project">
  	select 
    <include refid="Base_Column_List" />
    from project
    where student_id = #{studentId}
  </select>
  
  <update id="updateProjectByStudentId">
  		update project set student_id=#{studentId} where project_id = #{projectId}
  </update>
  
  <resultMap type="cn.lynu.model.Project" id="ps" extends="BaseResultMap">
  	<association property="student" column="student_id" select="cn.lynu.mapper.StudentMapper.getStudentByStudentId"></association>
  </resultMap>
  <select id="getProjectAndStudent" resultMap="ps">
  	select 
  	<include refid="Base_Column_List" />
    from project
    where teacher_id = #{teacherId}
  </select>
  
  <update id="updateNoStudent">
  	update project set student_id=NULL where project_id=#{projectId}
  </update>
  
  <resultMap type="cn.lynu.model.Project" id="projectComeFrom" extends="BaseResultMap">
  	<association property="projectFrom" column="project_from_id" select="cn.lynu.mapper.ProjectFromMapper.selectByPrimaryKey"></association>
  </resultMap>
   <select id="selectProjectAndFromByPid" parameterType="java.lang.Integer" resultMap="projectComeFrom">
    select 
    <include refid="Base_Column_List" />
    from project
    where project_id = #{projectId,jdbcType=INTEGER}
  </select>
  
  <select id="getCountProjectNum" resultType="int">
  	select count(*) from project where student_id is NULL
  </select>
  
  <select id="thisTeacherYesProjectNum" resultType="int">
  	select count(*) from project where teacher_id=#{teacherId} and student_id IS NOT NULL
  </select>
  
  <select id="getProjectByTeacherId" resultType="cn.lynu.model.Project">
  	select 
    <include refid="Base_Column_List" />
    from project
    where teacher_id = #{teacherId}
  </select>
  
</mapper>